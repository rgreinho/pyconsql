"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,super-init-not-called,unused-argument

import typing

import sqlalchemy
from sqlalchemy import orm

from open_alchemy import models


class _PetDictBase(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    name: str


class PetDict(_PetDictBase, total=False):
    """TypedDict for properties that are not required."""

    id: int
    tag: typing.Optional[str]


class TPet(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Attrs:
        id: The id of the Pet.
        name: The name of the Pet.
        tag: The tag of the Pet.

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: "sqlalchemy.Column[int]"
    name: "sqlalchemy.Column[str]"
    tag: "sqlalchemy.Column[typing.Optional[str]]"

    def __init__(
        self,
        name: str,
        id: typing.Optional[int] = None,
        tag: typing.Optional[str] = None,
    ) -> None:
        """
        Construct.

        Args:
            id: The id of the Pet.
            name: The name of the Pet.
            tag: The tag of the Pet.

        """
        ...

    @classmethod
    def from_dict(
        cls,
        name: str,
        id: typing.Optional[int] = None,
        tag: typing.Optional[str] = None,
    ) -> "TPet":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: The id of the Pet.
            name: The name of the Pet.
            tag: The tag of the Pet.

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TPet":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> PetDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Pet: typing.Type[TPet] = models.Pet  # type: ignore
